{"ast":null,"code":"var _jsxFileName = \"/Users/user/WebstormProjects/resume-test-project/src/components/post-block/Post.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport './../../App.scss';\nimport './Post.scss';\nimport { useForm } from \"react-hook-form\";\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport { FormControl, FormControlLabel, FormLabel, Radio, RadioGroup } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Post = () => {\n  _s();\n\n  var _errors$name, _errors$email, _errors$phone, _errors$photo;\n\n  const {\n    register,\n    formState: {\n      errors,\n      isValid\n    },\n    reset,\n    handleSubmit\n  } = useForm({\n    mode: 'all'\n  });\n  let [positions, setPosition] = useState([]);\n  let token = localStorage.getItem('token');\n  useEffect(() => {\n    fetch('https://frontend-test-assignment-api.abz.agency/api/v1/positions').then(response => response.json()).then(data => setPosition(data.positions));\n  }, []);\n\n  const setUser = async data => {\n    const formData = new FormData();\n    formData.append('name', data.name);\n    formData.append('phone', data.phone);\n    formData.append('position_id', data.position_id);\n    formData.append('email', data.email);\n    formData.append('photo', data.photo[0]);\n    await fetch(`https://frontend-test-assignment-api.abz.agency/api/v1/users`, {\n      method: 'POST',\n      body: formData,\n      headers: {\n        'Token': token\n      }\n    }).then(response => response).then(data => console.log(data));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"post__section\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"post__title title\",\n        children: \"Working with POST request\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        component: \"form\",\n        sx: {\n          '& .MuiTextField-root': {\n            m: 1,\n            width: '25ch'\n          }\n        },\n        onSubmit: handleSubmit(setUser),\n        autoComplete: \"off\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(TextField, { ...register('name', {\n              required: 'The string must not be empty',\n              minLength: {\n                value: 2,\n                message: 'MinLength 2 elements'\n              },\n              maxLength: {\n                value: 60,\n                message: 'MaxLength 60 elements'\n              }\n            }),\n            name: \"name\",\n            className: \"input__validation\",\n            type: \"name\",\n            placeholder: \"Your name\",\n            label: \"Name\",\n            helperText: (errors === null || errors === void 0 ? void 0 : errors.name) && (errors === null || errors === void 0 ? void 0 : (_errors$name = errors.name) === null || _errors$name === void 0 ? void 0 : _errors$name.message)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(TextField, { ...register('email', {\n              required: 'The string must not be empty',\n              minLength: {\n                value: 2,\n                message: 'MinLength 2 elements'\n              },\n              maxLength: {\n                value: 100,\n                message: 'MaxLength 100 elements'\n              },\n              pattern: {\n                value: /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$/,\n                message: 'Not valid email'\n              }\n            }),\n            name: \"email\",\n            className: \"input__validation\",\n            type: \"email\",\n            placeholder: \"Your email\",\n            label: \"Email\",\n            helperText: (errors === null || errors === void 0 ? void 0 : errors.email) && (errors === null || errors === void 0 ? void 0 : (_errors$email = errors.email) === null || _errors$email === void 0 ? void 0 : _errors$email.message)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(TextField, { ...register('phone', {\n              required: 'The string must not be empty',\n              pattern: {\n                value: /^[\\+]{0,1}380([0-9]{9})$/,\n                message: 'Not valid phone'\n              }\n            }),\n            name: \"phone\",\n            className: \"input__validation\",\n            type: \"phone\",\n            placeholder: \"Your phone\",\n            label: \"Phone\",\n            helperText: (errors === null || errors === void 0 ? void 0 : errors.phone) && (errors === null || errors === void 0 ? void 0 : (_errors$phone = errors.phone) === null || _errors$phone === void 0 ? void 0 : _errors$phone.message)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"num__example\",\n          children: \"+38 (XXX) XXX - XX - XX\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n            children: \"Select your position\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(RadioGroup, {\n            \"aria-labelledby\": \"demo-radio-buttons-group-label\",\n            defaultValue: \"female\",\n            name: \"radio-buttons-group\",\n            children: positions.map(position => /*#__PURE__*/_jsxDEV(FormControlLabel, {\n              value: position.id,\n              control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 104\n              }, this),\n              label: position.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 57\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"post__form\",\n        children: [\"// name='email' // className='input__validation' // type='email' // placeholder='Email' />\", /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error\",\n          children: (errors === null || errors === void 0 ? void 0 : errors.photo) && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"not__valid__input\",\n            children: errors === null || errors === void 0 ? void 0 : (_errors$photo = errors.photo) === null || _errors$photo === void 0 ? void 0 : _errors$photo.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 66\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...register('photo', {\n            required: 'Please add photo'\n          }),\n          className: \"input__load__file\",\n          type: \"file\",\n          name: \"photo\",\n          accept: \".jpg, .jpeg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"submit__btn\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            style: {\n              marginBottom: '100px'\n            },\n            className: \"custom__btn\",\n            type: \"submit\",\n            children: \"Sing up\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Post, \"/F8UAF7zyEfUxZ/r1CjzanuhCtQ=\", false, function () {\n  return [useForm];\n});\n\n_c = Post;\nexport default Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["/Users/user/WebstormProjects/resume-test-project/src/components/post-block/Post.jsx"],"names":["React","useEffect","useRef","useState","useForm","Box","TextField","FormControl","FormControlLabel","FormLabel","Radio","RadioGroup","Post","register","formState","errors","isValid","reset","handleSubmit","mode","positions","setPosition","token","localStorage","getItem","fetch","then","response","json","data","setUser","formData","FormData","append","name","phone","position_id","email","photo","method","body","headers","console","log","m","width","required","minLength","value","message","maxLength","pattern","map","position","id","marginBottom"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\nimport './../../App.scss'\nimport './Post.scss'\nimport {useForm} from \"react-hook-form\";\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport {FormControl, FormControlLabel, FormLabel, Radio, RadioGroup} from \"@mui/material\";\n\n\n\n\n\n\nconst Post = () => {\n    const {register, formState: {errors, isValid}, reset, handleSubmit} = useForm({mode: 'all'})\n    let [positions, setPosition] = useState([])\n    let token = localStorage.getItem('token')\n\n    useEffect( () => {\n      fetch('https://frontend-test-assignment-api.abz.agency/api/v1/positions')\n            .then(response => response.json())\n            .then(data => setPosition(data.positions))\n    }, [])\n\n    const setUser = async (data) => {\n        const formData = new FormData()\n        formData.append('name', data.name)\n        formData.append('phone', data.phone)\n        formData.append('position_id', data.position_id)\n        formData.append('email', data.email)\n        formData.append('photo', data.photo[0])\n        await fetch(`https://frontend-test-assignment-api.abz.agency/api/v1/users`, {\n            method: 'POST',\n            body: formData,\n            headers: {\n                'Token': token\n            },\n        })\n            .then((response) => response)\n            .then(data => console.log(data))\n    }\n\n    return (\n        <section className='post__section'>\n            <div className='container'>\n                <h1 className='post__title title'>Working with POST request</h1>\n                <Box\n                    component=\"form\"\n                    sx={{\n                        '& .MuiTextField-root': { m: 1, width: '25ch' },\n                    }}\n                    onSubmit={handleSubmit(setUser)}\n                    autoComplete=\"off\"\n                >\n                    <div>\n                        <TextField\n                            {...register('name', {\n                                required: 'The string must not be empty',\n                                minLength: {\n                                    value: 2,\n                                    message: 'MinLength 2 elements'\n                                },\n                                maxLength: {\n                                    value: 60,\n                                    message: 'MaxLength 60 elements'\n                                }})}\n                            name='name'\n                            className='input__validation'\n                            type='name'\n                            placeholder='Your name'\n                            label=\"Name\"\n                            helperText={errors?.name && errors?.name?.message}\n                        />\n                    </div>\n                    <div>\n                        <TextField\n                            {...register('email', {\n                                required: 'The string must not be empty',\n                                minLength: {\n                                    value: 2,\n                                    message: 'MinLength 2 elements'\n                                },\n                                maxLength: {\n                                    value: 100,\n                                    message: 'MaxLength 100 elements'\n                                },\n                                pattern: {\n                                    value: /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$/,\n                                    message: 'Not valid email'\n                                }\n                            })}\n                            name='email'\n                            className='input__validation'\n                            type='email'\n                            placeholder='Your email'\n                            label=\"Email\"\n                            helperText={errors?.email && errors?.email?.message}\n                        />\n                    </div>\n                    <div>\n                        <TextField\n                            {...register('phone', {\n                                required: 'The string must not be empty',\n                                pattern: {\n                                    value: /^[\\+]{0,1}380([0-9]{9})$/,\n                                    message: 'Not valid phone'\n                                }\n                            })}\n                            name='phone'\n                            className='input__validation'\n                            type='phone'\n                            placeholder='Your phone'\n                            label=\"Phone\"\n                            helperText={errors?.phone && errors?.phone?.message}\n                        />\n                    </div>\n                    <p className='num__example'>+38 (XXX) XXX - XX - XX</p>\n\n\n                    <FormControl>\n                        <FormLabel>Select your position</FormLabel>\n                        <RadioGroup\n                            aria-labelledby=\"demo-radio-buttons-group-label\"\n                            defaultValue=\"female\"\n                            name=\"radio-buttons-group\"\n                        >\n                            {positions.map(position =>  <FormControlLabel value={position.id} control={<Radio/>} label={position.name}/>)}\n                        </RadioGroup>\n                    </FormControl>\n                </Box>\n                <form className='post__form' >\n                    {/*<div className='error'>  {errors?.name && <p className='not__valid__input'>{errors?.name?.message}</p>}</div>*/}\n                    {/*<input*/}\n                    {/*    {...register('name', {*/}\n                    {/*        required: 'The string must not be empty',*/}\n                    {/*        minLength: {*/}\n                    {/*            value: 2,*/}\n                    {/*            message: 'MinLength 2 elements'*/}\n                    {/*        },*/}\n                    {/*        maxLength: {*/}\n                    {/*            value: 60,*/}\n                    {/*            message: 'MaxLength 60 elements'*/}\n                    {/*        }})}*/}\n                    {/*    name='name'*/}\n                    {/*    className='input__validation'*/}\n                    {/*    type='name'*/}\n                    {/*    placeholder='Your name'*/}\n                    {/*/>*/}\n                    {/*<div className='error'>{errors?.email && <p className='not__valid__input'>{errors?.email?.message}</p>}</div>*/}\n                    {/*<input*/}\n                        {/*{...register('email', {*/}\n                        {/*    required: 'The string must not be empty',*/}\n                        {/*    minLength: {*/}\n                        {/*        value: 2,*/}\n                        {/*        message: 'MinLength 2 elements'*/}\n                        {/*    },*/}\n                        {/*    maxLength: {*/}\n                        {/*        value: 100,*/}\n                        {/*        message: 'MaxLength 100 elements'*/}\n                        {/*    },*/}\n                        {/*    pattern: {*/}\n                        {/*        value: /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$/,*/}\n                        {/*        message: 'Not valid email'*/}\n                        {/*    }*/}\n                        {/*})}*/}\n                        // name='email'\n                        // className='input__validation'\n                        // type='email'\n                        // placeholder='Email'\n                    />\n                    {/*<div className='error'>{errors?.phone && <p className='not__valid__input'>{errors?.phone?.message}</p>}</div>*/}\n                    {/*<input*/}\n                    {/*    {...register('phone', {*/}\n                    {/*        required: 'The string must not be empty',*/}\n                    {/*        pattern: {*/}\n                    {/*            value: /^[\\+]{0,1}380([0-9]{9})$/,*/}\n                    {/*            message: 'Not valid phone'*/}\n                    {/*        }*/}\n                    {/*    })}*/}\n                    {/*    className='input__validation'*/}\n                    {/*    type='phone'*/}\n                    {/*    placeholder='Phone'*/}\n                    {/*/>*/}\n                    {/*<p className='num__example'>+38 (XXX) XXX - XX - XX</p>*/}\n                    {/*<p className='select__position'>Select your position</p>*/}\n                    {/*{positions.map((position) => {*/}\n                    {/*return    <div className='radio__item' key={position.id} >*/}\n                    {/*        <input  className='radio__btn' {...register(\"position_id\")} type=\"radio\" value={`${position.id}`}/>*/}\n                    {/*        <label className='radio__label'>{position.name}</label>*/}\n                    {/*    </div>*/}\n                    {/*})}*/}\n                        <div className='error'>{errors?.photo && <p className='not__valid__input'>{errors?.photo?.message}</p>}</div>\n                        <input\n                            {...register('photo', {\n                                required: 'Please add photo'\n                            })}\n                            className='input__load__file' type='file' name='photo'  accept=\".jpg, .jpeg\"/>\n                    <div className='submit__btn'>\n                        <button style={{marginBottom: '100px'}} className='custom__btn' type='submit'>Sing up</button>\n                    </div>\n                </form>\n            </div>\n        </section>\n    );\n};\n\nexport default Post;"]},"metadata":{},"sourceType":"module"}