{"ast":null,"code":"var _jsxFileName = \"/Users/user/WebstormProjects/resume-test-project/src/components/post-block/Post.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport './../../App.scss';\nimport './Post.scss';\nimport { useForm, Controller } from \"react-hook-form\";\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport { FormControlLabel, FormHelperText, Radio, RadioGroup } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Post = () => {\n  _s();\n\n  var _hiddenFileInput$curr, _hiddenFileInput$curr2, _errors$name;\n\n  let [positions, setPosition] = useState([]);\n  let token = localStorage.getItem('token');\n  let hiddenFileInput = useRef(null);\n  let nameFile = hiddenFileInput === null || hiddenFileInput === void 0 ? void 0 : (_hiddenFileInput$curr = hiddenFileInput.current) === null || _hiddenFileInput$curr === void 0 ? void 0 : (_hiddenFileInput$curr2 = _hiddenFileInput$curr.files[0]) === null || _hiddenFileInput$curr2 === void 0 ? void 0 : _hiddenFileInput$curr2.name;\n  useEffect(() => {\n    fetch('https://frontend-test-assignment-api.abz.agency/api/v1/positions').then(response => response.json()).then(data => setPosition(data.positions));\n  }, []);\n  const {\n    control,\n    formState: {\n      errors,\n      isValid\n    },\n    reset,\n    handleSubmit\n  } = useForm({\n    mode: 'all'\n  });\n\n  const setUser = async data => {\n    console.log('qwe'); // console.log(hiddenFileInput.current.files[0].name)\n\n    console.log(data); // const formData = new FormData()\n    // formData.append('name', data.name)\n    // formData.append('phone', data.phone)\n    // formData.append('position_id', data.position_id)\n    // formData.append('email', data.email)\n    // formData.append('photo', data.photo[0])\n    // await fetch(`https://frontend-test-assignment-api.abz.agency/api/v1/users`, {\n    //     method: 'POST',\n    //     body: formData,\n    //     headers: {\n    //         'Token': token\n    //     },\n    // })\n    //     .then((response) => response)\n    //     .then(data => console.log(data))\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"post__section\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"post__title title\",\n        children: \"Working with POST request\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit(setUser),\n        className: \"form_submit\",\n        children: [/*#__PURE__*/_jsxDEV(Controller, {\n          name: \"name\",\n          control: control,\n          rules: {\n            required: 'The string must not be empty',\n            minLength: {\n              value: 2,\n              message: 'MinLength 2 elements'\n            },\n            maxLength: {\n              value: 60,\n              message: 'MaxLength 60 elements'\n            }\n          },\n          render: _ref => {\n            let {\n              field: {\n                value,\n                onChange\n              }\n            } = _ref;\n            return /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              value: value,\n              onChange: onChange,\n              placeholder: \"Your name\",\n              label: \"Name\" // helperText={errors?.name && errors?.name?.message}\n\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 33\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(FormHelperText, {\n          children: (errors === null || errors === void 0 ? void 0 : errors.name) && (errors === null || errors === void 0 ? void 0 : (_errors$name = errors.name) === null || _errors$name === void 0 ? void 0 : _errors$name.message)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Controller, {\n          name: \"email\",\n          control: control,\n          rules: {\n            required: 'The string must not be empty',\n            minLength: {\n              value: 2,\n              message: 'MinLength 2 elements'\n            },\n            maxLength: {\n              value: 100,\n              message: 'MaxLength 100 elements'\n            },\n            pattern: {\n              value: /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$/,\n              message: 'Not valid email'\n            }\n          },\n          render: _ref2 => {\n            var _errors$email;\n\n            let {\n              field: {\n                value,\n                onChange\n              }\n            } = _ref2;\n            return /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              value: value,\n              onChange: onChange,\n              placeholder: \"Your email\",\n              label: \"Email\",\n              helperText: (errors === null || errors === void 0 ? void 0 : errors.email) && (errors === null || errors === void 0 ? void 0 : (_errors$email = errors.email) === null || _errors$email === void 0 ? void 0 : _errors$email.message)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 102,\n              columnNumber: 29\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Controller, {\n          name: \"phone\",\n          control: control,\n          rules: {\n            required: 'The string must not be empty',\n            pattern: {\n              value: /^[\\+]{0,1}380([0-9]{9})$/,\n              message: 'Not valid phone'\n            }\n          },\n          render: _ref3 => {\n            var _errors$phone;\n\n            let {\n              field: {\n                value,\n                onChange\n              }\n            } = _ref3;\n            return /*#__PURE__*/_jsxDEV(TextField, {\n              fullWidth: true,\n              value: value,\n              onChange: onChange,\n              placeholder: \"Your phone\",\n              label: \"Phone\",\n              helperText: (errors === null || errors === void 0 ? void 0 : errors.phone) && (errors === null || errors === void 0 ? void 0 : (_errors$phone = errors.phone) === null || _errors$phone === void 0 ? void 0 : _errors$phone.message)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 29\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Controller, {\n          name: \"position_id\",\n          control: control,\n          render: _ref4 => {\n            let {\n              field: {\n                onChange,\n                value\n              }\n            } = _ref4;\n            return /*#__PURE__*/_jsxDEV(RadioGroup, {\n              value: value,\n              onChange: onChange,\n              children: positions.map(position => /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                value: position.id,\n                label: position.name,\n                control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 145,\n                  columnNumber: 50\n                }, this)\n              }, position.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 141,\n                columnNumber: 37\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 29\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Controller, {\n          name: \"photo\",\n          control: control,\n          rules: {\n            required: 'Please add photo'\n          },\n          render: _ref5 => {\n            let {\n              field: {\n                onChange,\n                value\n              }\n            } = _ref5;\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"upload-file__block\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"upload-btn\",\n                onClick: () => hiddenFileInput.current.click(),\n                children: \"Upload\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                name: \"photo\",\n                type: \"file\",\n                ref: hiddenFileInput,\n                onChange: onChange,\n                style: {\n                  display: 'none'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"upload-file__name\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: nameFile ? nameFile : 'UploadFile'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 167,\n                  columnNumber: 68\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 167,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 29\n            }, this);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Post, \"wq8tFSQlFGuW/x5FibqA4I4XMoM=\", false, function () {\n  return [useForm];\n});\n\n_c = Post;\nexport default Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["/Users/user/WebstormProjects/resume-test-project/src/components/post-block/Post.jsx"],"names":["React","useEffect","useRef","useState","useForm","Controller","Box","TextField","FormControlLabel","FormHelperText","Radio","RadioGroup","Post","positions","setPosition","token","localStorage","getItem","hiddenFileInput","nameFile","current","files","name","fetch","then","response","json","data","control","formState","errors","isValid","reset","handleSubmit","mode","setUser","console","log","required","minLength","value","message","maxLength","field","onChange","pattern","email","phone","map","position","id","click","display"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\nimport './../../App.scss'\nimport './Post.scss'\nimport {useForm, Controller} from \"react-hook-form\";\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport {FormControlLabel, FormHelperText, Radio, RadioGroup} from \"@mui/material\";\n\n\n\n\nconst Post = () => {\n\n    let [positions, setPosition] = useState([])\n    let token = localStorage.getItem('token')\n    let hiddenFileInput = useRef(null)\n    let nameFile = hiddenFileInput?.current?.files[0]?.name;\n\n    useEffect( () => {\n        fetch('https://frontend-test-assignment-api.abz.agency/api/v1/positions')\n            .then(response => response.json())\n            .then(data => setPosition(data.positions))\n    }, [])\n\n\n    const {control, formState: {errors, isValid}, reset, handleSubmit} = useForm({mode: 'all'})\n\n\n\n    const setUser = async (data) => {\n        console.log('qwe')\n        // console.log(hiddenFileInput.current.files[0].name)\n        console.log(data)\n        // const formData = new FormData()\n        // formData.append('name', data.name)\n        // formData.append('phone', data.phone)\n        // formData.append('position_id', data.position_id)\n        // formData.append('email', data.email)\n        // formData.append('photo', data.photo[0])\n        // await fetch(`https://frontend-test-assignment-api.abz.agency/api/v1/users`, {\n        //     method: 'POST',\n        //     body: formData,\n        //     headers: {\n        //         'Token': token\n        //     },\n        // })\n        //     .then((response) => response)\n        //     .then(data => console.log(data))\n    }\n\n    return (\n        <section className='post__section'>\n            <div className='container'>\n                <h1 className='post__title title'>Working with POST request</h1>\n                <form onSubmit={handleSubmit(setUser)} className='form_submit'>\n                    <Controller\n                            name='name'\n                            control={control}\n                            rules={{\n                                required: 'The string must not be empty',\n                                minLength: {\n                                    value: 2,\n                                    message: 'MinLength 2 elements'\n                                },\n                                maxLength: {\n                                    value: 60,\n                                    message: 'MaxLength 60 elements'\n                                }\n                            }}\n                            render={({field: {value, onChange}}) => (\n                                <TextField\n                                    fullWidth={true}\n                                    value={value}\n                                    onChange={onChange}\n                                    placeholder='Your name'\n                                    label=\"Name\"\n                                    // helperText={errors?.name && errors?.name?.message}\n                                />\n                            )}\n                        />\n                    <FormHelperText >{errors?.name && errors?.name?.message}</FormHelperText>\n\n                        <Controller\n                        name='email'\n                        control={control}\n                        rules={{\n                            required: 'The string must not be empty',\n                            minLength: {\n                                value: 2,\n                                message: 'MinLength 2 elements'\n                            },\n                            maxLength: {\n                                value: 100,\n                                message: 'MaxLength 100 elements'\n                            },\n                            pattern: {\n                                value: /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$/,\n                                message: 'Not valid email'\n                            }\n                        }}\n                        render={({field: {value, onChange}}) => (\n                            <TextField\n                                fullWidth={true}\n                                value={value}\n                                onChange={onChange}\n                                placeholder='Your email'\n                                label=\"Email\"\n                                helperText={errors?.email && errors?.email?.message}\n                            />\n                        )}\n                    />\n                    <Controller\n                        name='phone'\n                        control={control}\n                        rules={{\n                            required: 'The string must not be empty',\n                            pattern: {\n                                value: /^[\\+]{0,1}380([0-9]{9})$/,\n                                message: 'Not valid phone',\n\n                            }\n                        }}\n                        render={({field: {value, onChange}}) => (\n                            <TextField\n                                fullWidth={true}\n                                value={value}\n                                onChange={onChange}\n                                placeholder='Your phone'\n                                label=\"Phone\"\n                                helperText={errors?.phone && errors?.phone?.message}\n                            />\n                        )}\n                    />\n\n                    <Controller\n                        name='position_id'\n                        control={control}\n                        render={({field: {onChange, value}}) => (\n                            <RadioGroup value={value} onChange={onChange}>\n                                {positions.map(position => (\n                                    <FormControlLabel\n                                        key={position.id}\n                                        value={position.id}\n                                        label={position.name}\n                                        control={<Radio/>}/>))}\n                            </RadioGroup>\n                        )}\n                    />\n                    <Controller\n                        name='photo'\n                        control={control}\n                        rules={{\n                            required: 'Please add photo'\n                        }}\n                        render={({field: {onChange, value}}) => (\n                            <div className='upload-file__block'>\n                                <button className='upload-btn' onClick={() => hiddenFileInput.current.click()}>\n                                    Upload\n                                </button>\n                                <input\n                                    name=\"photo\"\n                                    type='file'\n                                    ref={hiddenFileInput}\n                                    onChange={onChange}\n                                    style={{display: 'none'}}\n                                />\n                                <div className='upload-file__name'><div>{nameFile ? nameFile : 'UploadFile'}</div></div>\n                            </div>\n\n                        )}\n                    />\n                    <button type='submit'>Submit</button>\n                </form>\n            </div>\n        </section>\n    );\n};\n\nexport default Post;"]},"metadata":{},"sourceType":"module"}