{"ast":null,"code":"var _jsxFileName = \"/Users/user/WebstormProjects/resume-test-project/src/components/post-block/Post.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './../../App.scss';\nimport './Post.scss';\nimport { useForm } from \"react-hook-form\";\nimport MyButton from \"../UI/MyButton/MyButton\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Post = () => {\n  _s();\n\n  var _errors$name, _errors$email, _errors$phone;\n\n  let [positions, setPosition] = useState([]);\n  useEffect(() => {\n    fetch('https://frontend-test-assignment-api.abz.agency/api/v1/positions').then(response => response.json()).then(data => setPosition(data.positions));\n  }, []);\n  const {\n    register,\n    formState: {\n      errors,\n      isValid\n    },\n    reset,\n    handleSubmit\n  } = useForm({\n    mode: 'all'\n  });\n\n  const onSubmit = data => {\n    console.log(JSON.stringify(data));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"post__section\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"post__title title\",\n      children: \"Working with POST request\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"post__form\",\n      onSubmit: handleSubmit(onSubmit),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: [\"  \", (errors === null || errors === void 0 ? void 0 : errors.name) && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"not__valid__input\",\n          children: errors === null || errors === void 0 ? void 0 : (_errors$name = errors.name) === null || _errors$name === void 0 ? void 0 : _errors$name.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 63\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...register('name', {\n          required: 'The string must not be empty',\n          minLength: {\n            value: 2,\n            message: 'MinLength 2 elements'\n          },\n          maxLength: {\n            value: 12,\n            message: 'MaxLength 60 elements'\n          },\n          pattern: {\n            value: /^([а-яёА-ЯË]{1,23}|[a-zA-Z]{1,12})$/,\n            message: 'Name must contain only liters'\n          }\n        }),\n        name: \"name\",\n        className: \"input__validation\",\n        type: \"name\",\n        placeholder: \"Your name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: (errors === null || errors === void 0 ? void 0 : errors.email) && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"not__valid__input\",\n          children: errors === null || errors === void 0 ? void 0 : (_errors$email = errors.email) === null || _errors$email === void 0 ? void 0 : _errors$email.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 62\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...register('email', {\n          required: 'The string must not be empty',\n          minLength: {\n            value: 2,\n            message: 'MinLength 2 elements'\n          },\n          maxLength: {\n            value: 12,\n            message: 'MaxLength 100 elements'\n          },\n          pattern: {\n            value: /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$/,\n            message: 'Not valid email'\n          }\n        }),\n        name: \"email\",\n        className: \"input__validation\",\n        type: \"email\",\n        placeholder: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: (errors === null || errors === void 0 ? void 0 : errors.phone) && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"not__valid__input\",\n          children: errors === null || errors === void 0 ? void 0 : (_errors$phone = errors.phone) === null || _errors$phone === void 0 ? void 0 : _errors$phone.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 62\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", { ...register('phone', {\n          required: 'The string must not be empty',\n          pattern: {\n            message: 'Not valid phone'\n          }\n        }),\n        className: \"input__validation\",\n        type: \"phone\",\n        placeholder: \"Phone\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"num__example\",\n        children: \"+38 (XXX) XXX - XX - XX\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"select__position\",\n        children: \"Select your position\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 21\n      }, this), positions.map(position => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"radio__item\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"radio__btn\",\n            ...register(\"radio\"),\n            type: \"radio\",\n            value: `${position.name}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"radio__label\",\n            children: position.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 29\n          }, this)]\n        }, position.i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 31\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"input__load__file\",\n          type: \"file\",\n          name: \"picture\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(MyButton, {\n        type: \"submit\",\n        children: \"submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Post, \"ceaGXvIJWF7fpD0Yv9TwMHm61s8=\", false, function () {\n  return [useForm];\n});\n\n_c = Post;\nexport default Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["/Users/user/WebstormProjects/resume-test-project/src/components/post-block/Post.jsx"],"names":["React","useEffect","useState","useForm","MyButton","Post","positions","setPosition","fetch","then","response","json","data","register","formState","errors","isValid","reset","handleSubmit","mode","onSubmit","console","log","JSON","stringify","name","message","required","minLength","value","maxLength","pattern","email","phone","map","position","i"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport './../../App.scss'\nimport './Post.scss'\nimport {useForm} from \"react-hook-form\";\nimport MyButton from \"../UI/MyButton/MyButton\";\n\nconst Post = () => {\n\n   let [positions, setPosition] = useState([])\n\n    useEffect(() => {\n        fetch('https://frontend-test-assignment-api.abz.agency/api/v1/positions')\n            .then(response => response.json())\n            .then( data => setPosition(data.positions))\n    },[])\n\n    const {\n        register,\n        formState: {\n            errors,\n            isValid\n        },\n        reset,\n        handleSubmit\n    } = useForm({\n        mode: 'all'\n    })\n\n    const onSubmit = (data) => {\n        console.log(JSON.stringify(data))\n    }\n    return (\n        <section className='post__section'>\n                <h1 className='post__title title'>Working with POST request</h1>\n                <form className='post__form' onSubmit={handleSubmit(onSubmit)}>\n                    <div className='error'>  {errors?.name && <p className='not__valid__input'>{errors?.name?.message}</p>}</div>\n                    <input\n                        {...register('name', {\n                            required: 'The string must not be empty',\n                            minLength: {\n                                value: 2,\n                                message: 'MinLength 2 elements'\n                            },\n                            maxLength: {\n                                value: 12,\n                                message: 'MaxLength 60 elements'\n                            },\n                            pattern: {\n                                value: /^([а-яёА-ЯË]{1,23}|[a-zA-Z]{1,12})$/,\n                                message: 'Name must contain only liters'\n                            }\n                        })}\n                        name='name'\n                        className='input__validation'\n                        type='name'\n                        placeholder='Your name'\n                    />\n                    <div className='error'>{errors?.email && <p className='not__valid__input'>{errors?.email?.message}</p>}</div>\n                    <input\n                        {...register('email', {\n                            required: 'The string must not be empty',\n                            minLength: {\n                                value: 2,\n                                message: 'MinLength 2 elements'\n                            },\n                            maxLength: {\n                                value: 12,\n                                message: 'MaxLength 100 elements'\n                            },\n                            pattern: {\n                                value: /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$/,\n                                message: 'Not valid email'\n                            }\n                        })}\n                        name='email'\n                        className='input__validation'\n                        type='email'\n                        placeholder='Email'\n                    />\n                    <div className='error'>{errors?.phone && <p className='not__valid__input'>{errors?.phone?.message}</p>}</div>\n                    <input\n                        {...register('phone', {\n                            required: 'The string must not be empty',\n                            pattern: {\n                                message: 'Not valid phone'\n                            }\n                        })}\n                        className='input__validation' type='phone' placeholder='Phone'/>\n                    <p className='num__example'>+38 (XXX) XXX - XX - XX</p>\n                    <p className='select__position'>Select your position</p>\n                    {positions.map((position) => {\n                    return    <div className='radio__item' key={position.i}>\n                            <input className='radio__btn' {...register(\"radio\")} type=\"radio\" value={`${position.name}`}/>\n                            <label className='radio__label'>{position.name}</label>\n                        </div>\n                    })}\n                    <div>\n                        <input className='input__load__file' type='file' name='picture'/>\n                    </div>\n\n                    <MyButton type='submit'>submit</MyButton>\n                </form>\n        </section>\n    );\n};\n\nexport default Post;"]},"metadata":{},"sourceType":"module"}