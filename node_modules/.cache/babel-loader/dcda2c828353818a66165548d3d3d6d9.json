{"ast":null,"code":"var _jsxFileName = \"/Users/user/WebstormProjects/resume-test-project/src/components/authorization/authorization.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { CircularProgress, FormControlLabel, Radio, RadioGroup } from '@mui/material';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport './../../App.scss';\nimport './authorization.scss';\nimport MyButton from '../UI/myButton';\nimport apiRequests from '../../api/apiRequests';\nimport SuccessImage from \"../svg-componets/successImage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Authorization = props => {\n  _s();\n\n  let [positions, setPositions] = useState([]);\n  let [registerSuccess, setRegisterSuccess] = useState(false);\n  let [loaderRegister, setLoaderRegister] = useState(false);\n  const {\n    control,\n    register,\n    formState: {\n      errors,\n      isValid\n    },\n    handleSubmit\n  } = useForm({\n    mode: \"all\",\n    defaultValues: {\n      position_id: 1\n    }\n  });\n  useEffect(() => {\n    apiRequests.getPositions().then(data => setPositions(data.positions));\n  }, []);\n\n  const setUser = async data => {\n    setLoaderRegister(true);\n    const formData = new FormData();\n    formData.append('name', data.name);\n    formData.append('phone', data.phone);\n    formData.append('position_id', data.position_id);\n    formData.append('email', data.email); // formData.append('photo', data.photo[0]);\n\n    try {\n      const responseToken = await apiRequests.getToken();\n      let token = responseToken.token;\n      const postUsers = await apiRequests.setUser(formData, token);\n      if (!postUsers.success) return;\n      setLoaderRegister(false);\n      props.setLoader(true);\n      const data = await apiRequests.getUsers(1);\n      props.setUsers(data.users);\n      props.setPageNum(1);\n      props.setLoader(false);\n      await setRegisterSuccess(true);\n    } catch (e) {\n      console.log(e.message);\n    }\n  };\n\n  if (registerSuccess) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"register\",\n      className: \"authorization__section\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"success__register\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"title\",\n          children: \"User successfully registered\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(SuccessImage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 20\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    id: \"register\",\n    className: \"authorization__section\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"authorization__container container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"authorization__title title\",\n        children: \"Working with POST request\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit(setUser),\n        className: \"authorization__form\",\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            height: '104px'\n          },\n          children: /*#__PURE__*/_jsxDEV(Controller, {\n            name: \"name\",\n            control: control,\n            rules: {\n              required: 'The string must not be empty',\n              minLength: {\n                value: 2,\n                message: 'MinLength 2 elements'\n              },\n              maxLength: {\n                value: 60,\n                message: 'MaxLength 60 elements'\n              }\n            },\n            render: _ref => {\n              var _errors$name;\n\n              let {\n                field: {\n                  value,\n                  onChange\n                }\n              } = _ref;\n              return /*#__PURE__*/_jsxDEV(TextField, {\n                error: errors === null || errors === void 0 ? void 0 : errors.name,\n                fullWidth: true,\n                value: value,\n                onChange: onChange,\n                placeholder: \"Your name\",\n                label: \"Name\",\n                helperText: (errors === null || errors === void 0 ? void 0 : errors.name) && (errors === null || errors === void 0 ? void 0 : (_errors$name = errors.name) === null || _errors$name === void 0 ? void 0 : _errors$name.message)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 37\n              }, this);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            height: '104px'\n          },\n          children: /*#__PURE__*/_jsxDEV(Controller, {\n            name: \"email\",\n            control: control,\n            rules: {\n              required: 'The string must not be empty',\n              minLength: {\n                value: 2,\n                message: 'MinLength 2 elements'\n              },\n              maxLength: {\n                value: 100,\n                message: 'MaxLength 100 elements'\n              },\n              pattern: {\n                value: /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$/,\n                message: 'Not valid email'\n              }\n            },\n            render: _ref2 => {\n              var _errors$email;\n\n              let {\n                field: {\n                  value,\n                  onChange\n                }\n              } = _ref2;\n              return /*#__PURE__*/_jsxDEV(TextField, {\n                error: errors === null || errors === void 0 ? void 0 : errors.email,\n                fullWidth: true,\n                value: value,\n                onChange: onChange,\n                placeholder: \"Your email\",\n                label: \"Email\",\n                helperText: (errors === null || errors === void 0 ? void 0 : errors.email) && (errors === null || errors === void 0 ? void 0 : (_errors$email = errors.email) === null || _errors$email === void 0 ? void 0 : _errors$email.message)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 37\n              }, this);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            height: '104px',\n            position: 'relative'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Controller, {\n            name: \"phone\",\n            control: control,\n            rules: {\n              required: 'The string must not be empty',\n              pattern: {\n                value: /^[\\+]{0,1}380([0-9]{9})$/,\n                message: 'Not valid phone'\n              }\n            },\n            render: _ref3 => {\n              var _errors$phone;\n\n              let {\n                field: {\n                  value,\n                  onChange\n                }\n              } = _ref3;\n              return /*#__PURE__*/_jsxDEV(TextField, {\n                error: errors === null || errors === void 0 ? void 0 : errors.phone,\n                fullWidth: true,\n                value: value,\n                onChange: onChange,\n                placeholder: \"Your phone\",\n                label: \"Phone\",\n                helperText: (errors === null || errors === void 0 ? void 0 : errors.phone) && (errors === null || errors === void 0 ? void 0 : (_errors$phone = errors.phone) === null || _errors$phone === void 0 ? void 0 : _errors$phone.message)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 149,\n                columnNumber: 37\n              }, this);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"phone-number__example\",\n            children: \"+38 (XXX) XXX - XX - XX\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            marginBottom: '50px'\n          },\n          children: /*#__PURE__*/_jsxDEV(Controller, {\n            name: \"position_id\",\n            control: control,\n            render: _ref4 => {\n              let {\n                field: {\n                  value,\n                  onChange\n                }\n              } = _ref4;\n              return /*#__PURE__*/_jsxDEV(RadioGroup, {\n                value: value,\n                onChange: onChange,\n                children: positions.map(position => /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                  value: position.id,\n                  label: position.name,\n                  control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 176,\n                    columnNumber: 58\n                  }, this)\n                }, position.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 172,\n                  columnNumber: 45\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 167,\n                columnNumber: 37\n              }, this);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            marginBottom: '50px'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"upload__block\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"upload__btn\",\n              children: [\"Upload\", /*#__PURE__*/_jsxDEV(\"input\", { ...register('photo', {\n                  required: 'Please add photo'\n                }),\n                className: \"upload__input\",\n                type: \"file\",\n                name: \"photo\",\n                accept: \".jpg, .jpeg\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 186,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"upload-file__name\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                children: \"Upload file\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 197,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            marginBottom: '100px'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"show-btn__container\",\n            children: [/*#__PURE__*/_jsxDEV(MyButton, {\n              disabled: !isValid,\n              type: \"submit\",\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"loader\",\n              children: loaderRegister ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n                sx: {\n                  width: '10px',\n                  height: '10px'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 205,\n                columnNumber: 51\n              }, this) : ''\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 13\n  }, this);\n};\n\n_s(Authorization, \"6lKppXmLhuVFj6t8sdU7VFumQyc=\", false, function () {\n  return [useForm];\n});\n\n_c = Authorization;\nexport default Authorization;\n\nvar _c;\n\n$RefreshReg$(_c, \"Authorization\");","map":{"version":3,"sources":["/Users/user/WebstormProjects/resume-test-project/src/components/authorization/authorization.jsx"],"names":["React","useEffect","useState","useForm","Controller","CircularProgress","FormControlLabel","Radio","RadioGroup","Box","TextField","MyButton","apiRequests","SuccessImage","Authorization","props","positions","setPositions","registerSuccess","setRegisterSuccess","loaderRegister","setLoaderRegister","control","register","formState","errors","isValid","handleSubmit","mode","defaultValues","position_id","getPositions","then","data","setUser","formData","FormData","append","name","phone","email","responseToken","getToken","token","postUsers","success","setLoader","getUsers","setUsers","users","setPageNum","e","console","log","message","height","required","minLength","value","maxLength","field","onChange","pattern","position","marginBottom","map","id","width"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {useForm, Controller} from 'react-hook-form';\nimport {CircularProgress, FormControlLabel, Radio, RadioGroup} from '@mui/material';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport './../../App.scss'\nimport './authorization.scss'\nimport MyButton from '../UI/myButton';\nimport apiRequests from '../../api/apiRequests';\nimport SuccessImage from \"../svg-componets/successImage\";\n\n\nconst Authorization = (props) => {\n\n\n    let [positions, setPositions] = useState([]);\n    let [registerSuccess, setRegisterSuccess] = useState(false);\n    let [loaderRegister, setLoaderRegister] = useState(false);\n\n    const {control, register, formState: {errors, isValid}, handleSubmit} = useForm({\n        mode: \"all\",\n        defaultValues: {\n            position_id: 1,\n        }\n    });\n\n    useEffect(() => {\n        apiRequests.getPositions()\n            .then(data => setPositions(data.positions))\n    }, []);\n\n\n    const setUser = async (data) => {\n        setLoaderRegister(true);\n        const formData = new FormData();\n        formData.append('name', data.name);\n        formData.append('phone', data.phone);\n        formData.append('position_id', data.position_id);\n        formData.append('email', data.email);\n        // formData.append('photo', data.photo[0]);\n\n        try {\n            const responseToken = await apiRequests.getToken();\n            let token = responseToken.token\n            const postUsers = await apiRequests.setUser(formData, token)\n            if(!postUsers.success)\n                return\n\n            setLoaderRegister(false);\n            props.setLoader(true);\n            const data = await apiRequests.getUsers(1)\n            props.setUsers(data.users);\n            props.setPageNum((1));\n            props.setLoader(false);\n            await setRegisterSuccess(true);\n        } catch (e) {\n            console.log(e.message)\n\n\n        }\n    }\n        if (registerSuccess) {\n            return <section id='register' className='authorization__section'>\n                <div className='success__register'>\n                    <h1 className='title'>User successfully registered</h1>\n                    <SuccessImage/>\n                </div>\n            </section>\n        }\n\n        return (\n            <section id='register' className='authorization__section'>\n                <div className='authorization__container container'>\n                    <h1 className='authorization__title title'>Working with POST request</h1>\n                    <form onSubmit={handleSubmit(setUser)} className='authorization__form'>\n                        <Box sx={{height: '104px'}}>\n                            <Controller\n                                name='name'\n                                control={control}\n                                rules={{\n                                    required: 'The string must not be empty',\n                                    minLength: {\n                                        value: 2,\n                                        message: 'MinLength 2 elements'\n                                    },\n                                    maxLength: {\n                                        value: 60,\n                                        message: 'MaxLength 60 elements'\n                                    }\n                                }}\n                                render={({field: {value, onChange}}) => (\n                                    <TextField\n                                        error={errors?.name}\n                                        fullWidth={true}\n                                        value={value}\n                                        onChange={onChange}\n                                        placeholder='Your name'\n                                        label=\"Name\"\n                                        helperText={errors?.name && errors?.name?.message}\n                                    />\n                                )}\n                            />\n                        </Box>\n                        <Box sx={{height: '104px'}}>\n                            <Controller\n                                name='email'\n                                control={control}\n                                rules={{\n                                    required: 'The string must not be empty',\n                                    minLength: {\n                                        value: 2,\n                                        message: 'MinLength 2 elements'\n                                    },\n                                    maxLength: {\n                                        value: 100,\n                                        message: 'MaxLength 100 elements'\n                                    },\n                                    pattern: {\n                                        value: /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$/,\n                                        message: 'Not valid email'\n                                    }\n                                }}\n                                render={({field: {value, onChange}}) => (\n                                    <TextField\n                                        error={errors?.email}\n                                        fullWidth={true}\n                                        value={value}\n                                        onChange={onChange}\n                                        placeholder='Your email'\n                                        label='Email'\n                                        helperText={errors?.email && errors?.email?.message}\n                                    />\n                                )}\n\n                            />\n                        </Box>\n                        <Box sx={{height: '104px', position: 'relative'}}>\n                            <Controller\n                                name='phone'\n                                control={control}\n                                rules={{\n                                    required: 'The string must not be empty',\n                                    pattern: {\n                                        value: /^[\\+]{0,1}380([0-9]{9})$/,\n                                        message: 'Not valid phone',\n                                    }\n                                }}\n                                render={({field: {value, onChange}}) => (\n                                    <TextField\n                                        error={errors?.phone}\n                                        fullWidth={true}\n                                        value={value}\n                                        onChange={onChange}\n                                        placeholder='Your phone'\n                                        label='Phone'\n                                        helperText={errors?.phone && errors?.phone?.message}\n                                    />\n                                )}\n                            />\n                            <p className='phone-number__example'>+38 (XXX) XXX - XX - XX</p>\n                        </Box>\n                        <Box sx={{marginBottom: '50px'}}>\n                            <Controller\n                                name='position_id'\n                                control={control}\n                                render={({field: {value, onChange}}) => (\n                                    <RadioGroup\n                                        value={value}\n                                        onChange={onChange}\n                                    >\n                                        {positions.map(position => (\n                                            <FormControlLabel\n                                                key={position.id}\n                                                value={position.id}\n                                                label={position.name}\n                                                control={<Radio/>}\n                                            />))}\n                                    </RadioGroup>\n                                )}\n                            />\n                        </Box>\n                        <Box sx={{marginBottom: '50px'}}>\n                            <div className='upload__block'>\n                                <label className='upload__btn'>\n                                    Upload\n                                    <input\n                                        {...register('photo', {\n                                            required: 'Please add photo'\n                                        })}\n                                        className='upload__input'\n                                        type='file'\n                                        name='photo'\n                                        accept=\".jpg, .jpeg\"\n                                    />\n                                </label>\n                                <div className='upload-file__name'>\n                                    <div>Upload file</div>\n                                </div>\n                            </div>\n                        </Box>\n                        <Box sx={{marginBottom: '100px'}}>\n                            <div className='show-btn__container'>\n                                <MyButton disabled={!isValid} type='submit'>Submit</MyButton>\n                                <span className='loader'>\n                                {loaderRegister ? <CircularProgress sx={{width: '10px', height: '10px'}}/> : ''}\n                            </span>\n                            </div>\n                        </Box>\n                    </form>\n                </div>\n            </section>\n        );\n    };\n\nexport default Authorization;"]},"metadata":{},"sourceType":"module"}