{"ast":null,"code":"var _jsxFileName = \"/Users/user/WebstormProjects/resume-test-project/src/components/authorization/authorization.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useForm, Controller } from 'react-hook-form';\nimport { CircularProgress, FormControlLabel, Radio, RadioGroup, Tooltip } from '@mui/material';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport './../../App.scss';\nimport './authorization.scss';\nimport MyButton from '../UI/myButton';\nimport apiRequests from '../../api/apiRequests';\nimport SuccessImage from \"../svg-componets/successImage\";\nimport { logDOM } from \"@testing-library/react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Authorization = props => {\n  _s();\n\n  let [positions, setPositions] = useState([]); // let [activePosition, setActivePosition] = useState(1);\n\n  let [registerSuccess, setRegisterSuccess] = useState(false);\n  let [loaderRegister, setLoaderRegister] = useState(false); // let [values, setValue] = useState('Upload')\n\n  const {\n    control,\n    register,\n    formState: {\n      errors,\n      isValid\n    },\n    handleSubmit\n  } = useForm({\n    mode: 'all'\n  });\n  useEffect(() => {\n    apiRequests.getPositions().then(data => setPositions(data.positions)).catch(e => console.log(e));\n  }, []);\n\n  const setUser = async data => {\n    setLoaderRegister(true);\n    const formData = new FormData();\n    formData.append('name', data.name);\n    formData.append('phone', data.phone);\n    formData.append('position_id', data.position_id);\n    formData.append('email', data.email);\n    formData.append('photo', data.photo[0]);\n    const responseToken = await apiRequests.getToken();\n    let token = responseToken.token;\n    await apiRequests.setUsers(formData, token).then(data => {\n      if (data) setLoaderRegister(false);\n      props.setLoader(true);\n    }).catch(e => console.log(e));\n    await apiRequests.getUsers(1).then(data => {\n      props.setUsers(data.users);\n      props.setPageNum(1);\n      props.setLoader(false);\n      setRegisterSuccess(true);\n    }).catch(e => console.log(e));\n  };\n\n  if (registerSuccess) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"register\",\n      className: \"authorization__section\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"success__register\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"title\",\n          children: \"User successfully registered\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(SuccessImage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    id: \"register\",\n    className: \"authorization__section\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"authorization__container container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"authorization__title title\",\n        children: \"Working with POST request\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit(setUser),\n        className: \"authorization__form\",\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            height: '104px'\n          },\n          children: /*#__PURE__*/_jsxDEV(Controller, {\n            name: \"name\",\n            control: control,\n            rules: {\n              required: 'The string must not be empty',\n              minLength: {\n                value: 2,\n                message: 'MinLength 2 elements'\n              },\n              maxLength: {\n                value: 60,\n                message: 'MaxLength 60 elements'\n              }\n            },\n            render: _ref => {\n              var _errors$name;\n\n              let {\n                field: {\n                  value,\n                  onChange\n                }\n              } = _ref;\n              return /*#__PURE__*/_jsxDEV(TextField, {\n                error: errors === null || errors === void 0 ? void 0 : errors.name,\n                fullWidth: true,\n                value: value,\n                onChange: onChange,\n                placeholder: \"Your name\",\n                label: \"Name\",\n                helperText: (errors === null || errors === void 0 ? void 0 : errors.name) && (errors === null || errors === void 0 ? void 0 : (_errors$name = errors.name) === null || _errors$name === void 0 ? void 0 : _errors$name.message)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 33\n              }, this);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            height: '104px'\n          },\n          children: /*#__PURE__*/_jsxDEV(Controller, {\n            name: \"email\",\n            control: control,\n            rules: {\n              required: 'The string must not be empty',\n              minLength: {\n                value: 2,\n                message: 'MinLength 2 elements'\n              },\n              maxLength: {\n                value: 100,\n                message: 'MaxLength 100 elements'\n              },\n              pattern: {\n                value: /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$/,\n                message: 'Not valid email'\n              }\n            },\n            render: _ref2 => {\n              var _errors$email;\n\n              let {\n                field: {\n                  value,\n                  onChange\n                }\n              } = _ref2;\n              return /*#__PURE__*/_jsxDEV(TextField, {\n                error: errors === null || errors === void 0 ? void 0 : errors.email,\n                fullWidth: true,\n                value: value,\n                onChange: onChange,\n                placeholder: \"Your email\",\n                label: \"Email\",\n                helperText: (errors === null || errors === void 0 ? void 0 : errors.email) && (errors === null || errors === void 0 ? void 0 : (_errors$email = errors.email) === null || _errors$email === void 0 ? void 0 : _errors$email.message)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 33\n              }, this);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            height: '104px',\n            position: 'relative'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Controller, {\n            name: \"phone\",\n            control: control,\n            rules: {\n              required: 'The string must not be empty',\n              pattern: {\n                value: /^[\\+]{0,1}380([0-9]{9})$/,\n                message: 'Not valid phone'\n              }\n            },\n            render: _ref3 => {\n              var _errors$phone;\n\n              let {\n                field: {\n                  value,\n                  onChange\n                }\n              } = _ref3;\n              return /*#__PURE__*/_jsxDEV(TextField, {\n                error: errors === null || errors === void 0 ? void 0 : errors.phone,\n                fullWidth: true,\n                value: value,\n                onChange: onChange,\n                placeholder: \"Your phone\",\n                label: \"Phone\",\n                helperText: (errors === null || errors === void 0 ? void 0 : errors.phone) && (errors === null || errors === void 0 ? void 0 : (_errors$phone = errors.phone) === null || _errors$phone === void 0 ? void 0 : _errors$phone.message)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 33\n              }, this);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"phone-number__example\",\n            children: \"+38 (XXX) XXX - XX - XX\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            marginBottom: '50px'\n          },\n          children: /*#__PURE__*/_jsxDEV(Controller, {\n            rules: {\n              required: true\n            },\n            name: \"position_id\",\n            control: control,\n            render: _ref4 => {\n              let {\n                field\n              } = _ref4;\n              return /*#__PURE__*/_jsxDEV(RadioGroup, { ...field,\n                onChange: e => console.log(e),\n                children: positions.map(position => /*#__PURE__*/_jsxDEV(FormControlLabel, {\n                  value: position.id,\n                  label: position.name,\n                  control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 178,\n                    columnNumber: 54\n                  }, this)\n                }, position.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 174,\n                  columnNumber: 41\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 169,\n                columnNumber: 33\n              }, this);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            marginBottom: '50px'\n          },\n          children: /*#__PURE__*/_jsxDEV(Controller, {\n            name: \"photo\",\n            control: control,\n            rules: {\n              required: 'Pls add photo'\n            },\n            render: () => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"upload__block\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: \"upload__btn\",\n                children: [\"Upload\", /*#__PURE__*/_jsxDEV(\"input\", { ...register('photo', {\n                    required: 'Please add photo'\n                  }),\n                  className: \"upload__input\",\n                  type: \"file\",\n                  name: \"photo\",\n                  accept: \".jpg, .jpeg\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 195,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 193,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"upload-file__name\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  children: \"Upload file\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 206,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 205,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            marginBottom: '100px'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"show-btn__container\",\n            children: [/*#__PURE__*/_jsxDEV(MyButton, {\n              disabled: !isValid,\n              type: \"submit\",\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"loader\",\n              children: loaderRegister ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n                sx: {\n                  width: '10px',\n                  height: '10px'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 51\n              }, this) : ''\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Authorization, \"6lKppXmLhuVFj6t8sdU7VFumQyc=\", false, function () {\n  return [useForm];\n});\n\n_c = Authorization;\nexport default Authorization;\n\nvar _c;\n\n$RefreshReg$(_c, \"Authorization\");","map":{"version":3,"sources":["/Users/user/WebstormProjects/resume-test-project/src/components/authorization/authorization.jsx"],"names":["React","useEffect","useState","useForm","Controller","CircularProgress","FormControlLabel","Radio","RadioGroup","Tooltip","Box","TextField","MyButton","apiRequests","SuccessImage","logDOM","Authorization","props","positions","setPositions","registerSuccess","setRegisterSuccess","loaderRegister","setLoaderRegister","control","register","formState","errors","isValid","handleSubmit","mode","getPositions","then","data","catch","e","console","log","setUser","formData","FormData","append","name","phone","position_id","email","photo","responseToken","getToken","token","setUsers","setLoader","getUsers","users","setPageNum","height","required","minLength","value","message","maxLength","field","onChange","pattern","position","marginBottom","map","id","width"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport {useForm, Controller} from 'react-hook-form';\nimport {CircularProgress, FormControlLabel, Radio, RadioGroup, Tooltip} from '@mui/material';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport './../../App.scss'\nimport './authorization.scss'\nimport MyButton from '../UI/myButton';\nimport apiRequests from '../../api/apiRequests';\nimport SuccessImage from \"../svg-componets/successImage\";\nimport {logDOM} from \"@testing-library/react\";\n\n\nconst Authorization = (props) => {\n\n    let [positions, setPositions] = useState([]);\n    // let [activePosition, setActivePosition] = useState(1);\n    let [registerSuccess, setRegisterSuccess] = useState(false);\n    let [loaderRegister, setLoaderRegister] = useState(false);\n    // let [values, setValue] = useState('Upload')\n\n    const {control, register, formState: {errors, isValid}, handleSubmit} = useForm({mode: 'all'});\n\n\n    useEffect(() => {\n        apiRequests.getPositions()\n            .then(data => setPositions(data.positions))\n            .catch(e => console.log(e))\n    }, []);\n\n    const setUser = async (data) => {\n        setLoaderRegister(true);\n        const formData = new FormData();\n        formData.append('name', data.name);\n        formData.append('phone', data.phone);\n        formData.append('position_id', data.position_id);\n        formData.append('email', data.email);\n        formData.append('photo', data.photo[0]);\n\n        const responseToken = await apiRequests.getToken();\n        let token = responseToken.token\n\n        await apiRequests.setUsers(formData, token)\n            .then(data => {\n                if (data)\n                    setLoaderRegister(false);\n                props.setLoader(true);\n            })\n            .catch(e => console.log(e))\n\n        await apiRequests.getUsers(1)\n            .then(data => {\n                props.setUsers(data.users);\n                props.setPageNum((1));\n                props.setLoader(false);\n                setRegisterSuccess(true);\n            })\n            .catch(e => console.log(e))\n    }\n\n    if (registerSuccess) {\n        return <section id='register' className='authorization__section'>\n            <div className='success__register'>\n                <h1 className='title'>User successfully registered</h1>\n                <SuccessImage/>\n            </div>\n        </section>\n    }\n\n    return (\n        <section id='register' className='authorization__section'>\n            <div className='authorization__container container'>\n                <h1 className='authorization__title title'>Working with POST request</h1>\n                <form onSubmit={handleSubmit(setUser)} className='authorization__form'>\n                    <Box sx={{height: '104px'}}>\n                        <Controller\n                            name='name'\n                            control={control}\n                            rules={{\n                                required: 'The string must not be empty',\n                                minLength: {\n                                    value: 2,\n                                    message: 'MinLength 2 elements'\n                                },\n                                maxLength: {\n                                    value: 60,\n                                    message: 'MaxLength 60 elements'\n                                }\n                            }}\n                            render={({field: {value, onChange}}) => (\n                                <TextField\n                                    error={errors?.name}\n                                    fullWidth={true}\n                                    value={value}\n                                    onChange={onChange}\n                                    placeholder='Your name'\n                                    label=\"Name\"\n                                    helperText={errors?.name && errors?.name?.message}\n                                />\n                            )}\n                        />\n                    </Box>\n                    <Box sx={{height: '104px'}}>\n                        <Controller\n                            name='email'\n                            control={control}\n                            rules={{\n                                required: 'The string must not be empty',\n                                minLength: {\n                                    value: 2,\n                                    message: 'MinLength 2 elements'\n                                },\n                                maxLength: {\n                                    value: 100,\n                                    message: 'MaxLength 100 elements'\n                                },\n                                pattern: {\n                                    value: /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$/,\n                                    message: 'Not valid email'\n                                }\n                            }}\n                            render={({field: {value, onChange}}) => (\n                                <TextField\n                                    error={errors?.email}\n                                    fullWidth={true}\n                                    value={value}\n                                    onChange={onChange}\n                                    placeholder='Your email'\n                                    label='Email'\n                                    helperText={errors?.email && errors?.email?.message}\n                                />\n                            )}\n\n                        />\n                    </Box>\n                    <Box sx={{height: '104px', position: 'relative'}}>\n                        <Controller\n                            name='phone'\n                            control={control}\n                            rules={{\n                                required: 'The string must not be empty',\n                                pattern: {\n                                    value: /^[\\+]{0,1}380([0-9]{9})$/,\n                                    message: 'Not valid phone',\n                                }\n                            }}\n                            render={({field: {value, onChange}}) => (\n                                <TextField\n                                    error={errors?.phone}\n                                    fullWidth={true}\n                                    value={value}\n                                    onChange={onChange}\n                                    placeholder='Your phone'\n                                    label='Phone'\n                                    helperText={errors?.phone && errors?.phone?.message}\n                                />\n                            )}\n                        />\n                        <p className='phone-number__example'>+38 (XXX) XXX - XX - XX</p>\n                    </Box>\n                    <Box sx={{marginBottom: '50px'}}>\n                        <Controller\n                            rules={{\n                                required:true\n                            }}\n                            name='position_id'\n                            control={control}\n                            render={({field}) => (\n                                <RadioGroup\n                                    {...field}\n                                    onChange={e => console.log(e)}\n                                >\n                                    {positions.map(position => (\n                                        <FormControlLabel\n                                            key={position.id}\n                                            value={position.id}\n                                            label={position.name}\n                                            control={<Radio/>}\n                                        />))}\n                                </RadioGroup>\n                            )}\n                        />\n                    </Box>\n                    <Box sx={{marginBottom: '50px'}}>\n                        <Controller\n                            name='photo'\n                            control={control}\n                            rules={{\n                                required: 'Pls add photo',\n                            }}\n                            render={() => (\n                                <div className='upload__block'>\n                                    <label className='upload__btn'>\n                                        Upload\n                                        <input\n                                            {...register('photo', {\n                                                required: 'Please add photo'\n                                            })}\n                                            className='upload__input'\n                                            type='file'\n                                            name='photo'\n                                            accept=\".jpg, .jpeg\"\n                                        />\n                                    </label>\n                                    <div className='upload-file__name'>\n                                        <div>Upload file</div>\n                                    </div>\n                                </div>\n                            )}\n                        />\n                    </Box>\n                    <Box sx={{marginBottom: '100px'}}>\n                        <div className='show-btn__container'>\n                            <MyButton disabled={!isValid} type='submit'>Submit</MyButton>\n                            <span className='loader'>\n                                {loaderRegister ? <CircularProgress sx={{width: '10px', height: '10px'}}/> : ''}\n                            </span>\n                        </div>\n                    </Box>\n                </form>\n            </div>\n        </section>\n    );\n};\n\nexport default Authorization;"]},"metadata":{},"sourceType":"module"}