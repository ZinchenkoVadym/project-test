{"ast":null,"code":"var _jsxFileName = \"/Users/user/WebstormProjects/resume-test-project/src/components/post-block/Post.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport './../../App.scss';\nimport './Post.scss';\nimport { useForm, Controller } from \"react-hook-form\";\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport { FormControl, FormControlLabel, FormLabel, Radio, RadioGroup } from \"@mui/material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Post = () => {\n  _s();\n\n  const {\n    control,\n    formState: {\n      errors,\n      isValid\n    },\n    reset,\n    handleSubmit\n  } = useForm({\n    mode: 'all'\n  });\n  let [positions, setPosition] = useState([]);\n  let token = localStorage.getItem('token');\n  useEffect(() => {\n    fetch('https://frontend-test-assignment-api.abz.agency/api/v1/positions').then(response => response.json()).then(data => setPosition(data.positions));\n  }, []);\n\n  const setUser = async data => {\n    console.log(data); // const formData = new FormData()\n    // formData.append('name', data.name)\n    // formData.append('phone', data.phone)\n    // formData.append('position_id', data.position_id)\n    // formData.append('email', data.email)\n    // formData.append('photo', data.photo[0])\n    // await fetch(`https://frontend-test-assignment-api.abz.agency/api/v1/users`, {\n    //     method: 'POST',\n    //     body: formData,\n    //     headers: {\n    //         'Token': token\n    //     },\n    // })\n    //     .then((response) => response)\n    //     .then(data => console.log(data))\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"post__section\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"post__title title\",\n        children: \"Working with POST request\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Controller, {\n        name: \"name\",\n        control: control,\n        rules: {\n          required: true,\n          minLength: {\n            value: 2,\n            message: 'MinLength 2 elements'\n          },\n          maxLength: {\n            value: 60,\n            message: 'MaxLength 60 elements'\n          }\n        },\n        render: _ref => {\n          var _errors$name;\n\n          let {\n            field\n          } = _ref;\n          return /*#__PURE__*/_jsxDEV(TextField, {\n            placeholder: \"Your name\",\n            label: \"Name\",\n            helperText: (errors === null || errors === void 0 ? void 0 : errors.name) && (errors === null || errors === void 0 ? void 0 : (_errors$name = errors.name) === null || _errors$name === void 0 ? void 0 : _errors$name.message)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 25\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Post, \"hbvLUDxNISjhLIjx3cMv3k6iaWQ=\", false, function () {\n  return [useForm];\n});\n\n_c = Post;\nexport default Post;\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["/Users/user/WebstormProjects/resume-test-project/src/components/post-block/Post.jsx"],"names":["React","useEffect","useRef","useState","useForm","Controller","Box","TextField","FormControl","FormControlLabel","FormLabel","Radio","RadioGroup","Post","control","formState","errors","isValid","reset","handleSubmit","mode","positions","setPosition","token","localStorage","getItem","fetch","then","response","json","data","setUser","console","log","required","minLength","value","message","maxLength","field","name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,MAA1B,EAAkCC,QAAlC,QAAiD,OAAjD;AACA,OAAO,kBAAP;AACA,OAAO,aAAP;AACA,SAAQC,OAAR,EAAiBC,UAAjB,QAAkC,iBAAlC;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,SAAQC,WAAR,EAAqBC,gBAArB,EAAuCC,SAAvC,EAAkDC,KAAlD,EAAyDC,UAAzD,QAA0E,eAA1E;;;AAOA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACf,QAAM;AACFC,IAAAA,OADE;AAEFC,IAAAA,SAAS,EAAE;AACPC,MAAAA,MADO;AAEPC,MAAAA;AAFO,KAFT;AAMFC,IAAAA,KANE;AAOFC,IAAAA;AAPE,MAOcf,OAAO,CAAC;AAACgB,IAAAA,IAAI,EAAE;AAAP,GAAD,CAP3B;AAQA,MAAI,CAACC,SAAD,EAAYC,WAAZ,IAA2BnB,QAAQ,CAAC,EAAD,CAAvC;AACA,MAAIoB,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAZ;AAEAxB,EAAAA,SAAS,CAAE,MAAM;AACfyB,IAAAA,KAAK,CAAC,kEAAD,CAAL,CACOC,IADP,CACYC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADxB,EAEOF,IAFP,CAEYG,IAAI,IAAIR,WAAW,CAACQ,IAAI,CAACT,SAAN,CAF/B;AAGD,GAJQ,EAIN,EAJM,CAAT;;AAMA,QAAMU,OAAO,GAAG,MAAOD,IAAP,IAAgB;AAC5BE,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ,EAD4B,CAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,GAjBD;;AAmBA,sBACI;AAAS,IAAA,SAAS,EAAC,eAAnB;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACI;AAAI,QAAA,SAAS,EAAC,mBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,UAAD;AACI,QAAA,IAAI,EAAC,MADT;AAEI,QAAA,OAAO,EAAEhB,OAFb;AAGI,QAAA,KAAK,EAAE;AACHoB,UAAAA,QAAQ,EAAE,IADP;AAEHC,UAAAA,SAAS,EAAE;AACPC,YAAAA,KAAK,EAAE,CADA;AAEPC,YAAAA,OAAO,EAAE;AAFF,WAFR;AAMHC,UAAAA,SAAS,EAAE;AACPF,YAAAA,KAAK,EAAE,EADA;AAEPC,YAAAA,OAAO,EAAE;AAFF;AANR,SAHX;AAcI,QAAA,MAAM,EAAE;AAAA;;AAAA,cAAC;AAACE,YAAAA;AAAD,WAAD;AAAA,8BACJ,QAAC,SAAD;AACI,YAAA,WAAW,EAAC,WADhB;AAEI,YAAA,KAAK,EAAC,MAFV;AAGI,YAAA,UAAU,EAAE,CAAAvB,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEwB,IAAR,MAAgBxB,MAAhB,aAAgBA,MAAhB,uCAAgBA,MAAM,CAAEwB,IAAxB,iDAAgB,aAAcH,OAA9B;AAHhB;AAAA;AAAA;AAAA;AAAA,kBADI;AAAA;AAdZ;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAqIH,CA1KD;;GAAMxB,I;UAQkBT,O;;;KARlBS,I;AA4KN,eAAeA,IAAf","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\nimport './../../App.scss'\nimport './Post.scss'\nimport {useForm, Controller} from \"react-hook-form\";\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport {FormControl, FormControlLabel, FormLabel, Radio, RadioGroup} from \"@mui/material\";\n\n\n\n\n\n\nconst Post = () => {\n    const {\n        control,\n        formState: {\n            errors,\n            isValid\n        },\n        reset,\n        handleSubmit} = useForm({mode: 'all'})\n    let [positions, setPosition] = useState([])\n    let token = localStorage.getItem('token')\n\n    useEffect( () => {\n      fetch('https://frontend-test-assignment-api.abz.agency/api/v1/positions')\n            .then(response => response.json())\n            .then(data => setPosition(data.positions))\n    }, [])\n\n    const setUser = async (data) => {\n        console.log(data)\n        // const formData = new FormData()\n        // formData.append('name', data.name)\n        // formData.append('phone', data.phone)\n        // formData.append('position_id', data.position_id)\n        // formData.append('email', data.email)\n        // formData.append('photo', data.photo[0])\n        // await fetch(`https://frontend-test-assignment-api.abz.agency/api/v1/users`, {\n        //     method: 'POST',\n        //     body: formData,\n        //     headers: {\n        //         'Token': token\n        //     },\n        // })\n        //     .then((response) => response)\n        //     .then(data => console.log(data))\n    }\n\n    return (\n        <section className='post__section'>\n            <div className='container'>\n                <h1 className='post__title title'>Working with POST request</h1>\n                <Controller\n                    name='name'\n                    control={control}\n                    rules={{\n                        required: true,\n                        minLength: {\n                            value: 2,\n                            message: 'MinLength 2 elements'\n                        },\n                        maxLength: {\n                            value: 60,\n                            message: 'MaxLength 60 elements'\n                        }\n                    }}\n                    render={({field}) => (\n                        <TextField\n                            placeholder='Your name'\n                            label=\"Name\"\n                            helperText={errors?.name && errors?.name?.message}\n                        />\n                    )}\n                />\n             \n\n\n\n                {/*<Box*/}\n                {/*    component=\"form\"*/}\n                {/*    sx={{*/}\n                {/*        '& .MuiTextField-root': { m: 1, width: '25ch' },*/}\n                {/*    }}*/}\n                {/*    onSubmit={handleSubmit(setUser)}*/}\n                {/*>*/}\n                {/*    <div>*/}\n                {/*        <TextField*/}\n                {/*            {...register('name', {*/}\n                {/*                required: 'The string must not be empty',*/}\n                {/*                minLength: {*/}\n                {/*                    value: 2,*/}\n                {/*                    message: 'MinLength 2 elements'*/}\n                {/*                },*/}\n                {/*                maxLength: {*/}\n                {/*                    value: 60,*/}\n                {/*                    message: 'MaxLength 60 elements'*/}\n                {/*                }})}*/}\n                {/*            name='name'*/}\n                {/*            className='input__validation'*/}\n                {/*            type='name'*/}\n                {/*            placeholder='Your name'*/}\n                {/*            label=\"Name\"*/}\n                {/*            helperText={errors?.name && errors?.name?.message}*/}\n                {/*        />*/}\n                {/*    </div>*/}\n                {/*    <div>*/}\n                {/*        <TextField*/}\n                {/*            {...register('email', {*/}\n                {/*                required: 'The string must not be empty',*/}\n                {/*                minLength: {*/}\n                {/*                    value: 2,*/}\n                {/*                    message: 'MinLength 2 elements'*/}\n                {/*                },*/}\n                {/*                maxLength: {*/}\n                {/*                    value: 100,*/}\n                {/*                    message: 'MaxLength 100 elements'*/}\n                {/*                },*/}\n                {/*                pattern: {*/}\n                {/*                    value: /^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$/,*/}\n                {/*                    message: 'Not valid email'*/}\n                {/*                }*/}\n                {/*            })}*/}\n                {/*            name='email'*/}\n                {/*            className='input__validation'*/}\n                {/*            type='email'*/}\n                {/*            placeholder='Your email'*/}\n                {/*            label=\"Email\"*/}\n                {/*            helperText={errors?.email && errors?.email?.message}*/}\n                {/*        />*/}\n                {/*    </div>*/}\n                {/*    <div>*/}\n                {/*        <TextField*/}\n                {/*            {...register('phone', {*/}\n                {/*                required: 'The string must not be empty',*/}\n                {/*                pattern: {*/}\n                {/*                    value: /^[\\+]{0,1}380([0-9]{9})$/,*/}\n                {/*                    message: 'Not valid phone'*/}\n                {/*                }*/}\n                {/*            })}*/}\n                {/*            name='phone'*/}\n                {/*            className='input__validation'*/}\n                {/*            type='phone'*/}\n                {/*            placeholder='Your phone'*/}\n                {/*            label=\"Phone\"*/}\n                {/*            helperText={errors?.phone && errors?.phone?.message}*/}\n                {/*        />*/}\n                {/*    </div>*/}\n                {/*    <p className='num__example'>+38 (XXX) XXX - XX - XX</p>*/}\n                {/*        <FormLabel>Select your position</FormLabel>*/}\n                {/*        <RadioGroup name=\"radio-buttons-group\">*/}\n                {/*            {positions.map(position =>  <FormControlLabel type='radio' name='radio' value={position.id} control={<Radio/>} label={position.name}/>)}*/}\n                {/*        </RadioGroup>*/}\n                {/*    <div className='submit__btn'>*/}\n                {/*        <button style={{marginBottom: '100px'}} className='custom__btn' type='submit'>Sing up</button>*/}\n                {/*    </div>*/}\n\n                {/*</Box>*/}\n\n                    {/*    })}*/}\n                    {/*    className='input__validation'*/}\n                    {/*    type='phone'*/}\n                    {/*    placeholder='Phone'*/}\n                    {/*/>*/}\n                    {/*<p className='num__example'>+38 (XXX) XXX - XX - XX</p>*/}\n                    {/*<p className='select__position'>Select your position</p>*/}\n                    {/*{positions.map((position) => {*/}\n                    {/*return    <div className='radio__item' key={position.id} >*/}\n                    {/*        <input  className='radio__btn' {...register(\"position_id\")} type=\"radio\" value={`${position.id}`}/>*/}\n                    {/*        <label className='radio__label'>{position.name}</label>*/}\n                    {/*    </div>*/}\n                    {/*})}*/}\n                    {/*    <div className='error'>{errors?.photo && <p className='not__valid__input'>{errors?.photo?.message}</p>}</div>*/}\n                    {/*    <input*/}\n                    {/*        {...register('photo', {*/}\n                    {/*            required: 'Please add photo'*/}\n                    {/*        })}*/}\n                    {/*        className='input__load__file' type='file' name='photo'  accept=\".jpg, .jpeg\"/>*/}\n\n            </div>\n        </section>\n    );\n};\n\nexport default Post;"]},"metadata":{},"sourceType":"module"}